"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DraggableList;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactBeautifulDnd = require("react-beautiful-dnd");

var _deskTool = require("@sanity/desk-tool");

var _ui = require("@sanity/ui");

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _Document = _interopRequireDefault(require("./Document"));

var _reorderDocuments2 = require("./helpers/reorderDocuments");

var _constants = require("./helpers/constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var client = _client.default.withConfig({
  apiVersion: '2021-09-01'
});

var getItemStyle = (draggableStyle, itemIsUpdating) => _objectSpread({
  userSelect: 'none',
  transition: "opacity 500ms ease-in-out",
  opacity: itemIsUpdating ? 0.2 : 1,
  pointerEvents: itemIsUpdating ? "none" : undefined
}, draggableStyle);

var cardTone = settings => {
  var isDuplicate = settings.isDuplicate,
      isGhosting = settings.isGhosting,
      isDragging = settings.isDragging,
      isSelected = settings.isSelected;
  if (isGhosting) return "transparent";
  if (isDragging || isSelected) return "primary";
  if (isDuplicate) return "caution";
  return undefined;
};

function DraggableList(_ref) {
  var data = _ref.data,
      type = _ref.type,
      listIsUpdating = _ref.listIsUpdating,
      setListIsUpdating = _ref.setListIsUpdating;
  var toast = (0, _ui.useToast)();
  var router = (0, _deskTool.usePaneRouter)();
  var navigateIntent = router.navigateIntent; // Maintains local state order before transaction completes

  var _useState = (0, _react.useState)(data),
      _useState2 = _slicedToArray(_useState, 2),
      orderedData = _useState2[0],
      setOrderedData = _useState2[1]; // Update local state when documents change from an outside source


  (0, _react.useEffect)(() => {
    if (!listIsUpdating) setOrderedData(data);
    /* eslint-disable-next-line react-hooks/exhaustive-deps */
  }, [data]);

  var _useState3 = (0, _react.useState)(""),
      _useState4 = _slicedToArray(_useState3, 2),
      draggingId = _useState4[0],
      setDraggingId = _useState4[1];

  var _useState5 = (0, _react.useState)([]),
      _useState6 = _slicedToArray(_useState5, 2),
      selectedIds = _useState6[0],
      setSelectedIds = _useState6[1];

  var clearSelected = () => setSelectedIds([]);

  var handleSelect = (clickedId, index, nativeEvent) => {
    var isSelected = selectedIds.includes(clickedId);
    var selectMultiple = nativeEvent.shiftKey;
    var isUsingWindows = navigator.appVersion.indexOf('Win') !== -1;
    var selectAdditional = isUsingWindows ? nativeEvent.ctrlKey : nativeEvent.metaKey;
    var updatedIds = []; // No modifier keys pressed during click:
    // - update selected to just this one
    // - open document

    if (!selectMultiple && !selectAdditional) {
      navigateIntent('edit', {
        id: clickedId,
        type
      });
      return setSelectedIds([clickedId]);
    } // Shift key was held, add id's between last selected and this one
    // ...before adding this one


    if (selectMultiple && !isSelected) {
      var lastSelectedId = selectedIds.at(-1);
      var lastSelectedIndex = orderedData.findIndex(item => item._id === lastSelectedId);
      var firstSelected = index < lastSelectedIndex ? index : lastSelectedIndex;
      var lastSelected = index > lastSelectedIndex ? index : lastSelectedIndex;
      var betweenIds = orderedData.filter((item, itemIndex) => itemIndex > firstSelected && itemIndex < lastSelected).map(item => item._id);
      updatedIds = [...selectedIds, ...betweenIds, clickedId];
    } else if (isSelected) {
      // Toggle off a single id
      updatedIds = selectedIds.filter(id => id !== clickedId);
    } else {
      // Toggle on a single id
      updatedIds = [...selectedIds, clickedId];
    }

    return setSelectedIds(updatedIds);
  };

  var transactPatches = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(function* (patches, message) {
      var transaction = client.transaction();
      patches.forEach(patchArgs => transaction.patch(...patchArgs));
      yield transaction.commit().then(updated => {
        clearSelected();
        setDraggingId("");
        setListIsUpdating(false);
        toast.push({
          title: "".concat(updated.results.length === 1 ? "1 Document" : "".concat(updated.results.length, " Documents"), " Reordered"),
          status: "success",
          description: message
        });
      }).catch(() => {
        setDraggingId("");
        setListIsUpdating(false);
        toast.push({
          title: "Reordering failed",
          status: "critical"
        });
      });
    });

    return function transactPatches(_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  var handleDragEnd = (result, entities) => {
    setDraggingId("");

    var _ref3 = result !== null && result !== void 0 ? result : {},
        source = _ref3.source,
        destination = _ref3.destination,
        draggableId = _ref3.draggableId; // Don't do anything if nothing changed


    if (source.index === destination.index) return; // Don't do anything if we don't have the entitites

    if (!(entities !== null && entities !== void 0 && entities.length)) return; // A document can be dragged without being one-of-many-selected

    var effectedIds = selectedIds !== null && selectedIds !== void 0 && selectedIds.length ? selectedIds : [draggableId]; // Don't do anything if we don't have ids to effect

    if (!(effectedIds !== null && effectedIds !== void 0 && effectedIds.length)) return; // Update state to update styles + prevent data refetching

    setListIsUpdating(true);
    setSelectedIds(effectedIds);

    var _reorderDocuments = (0, _reorderDocuments2.reorderDocuments)({
      entities,
      selectedIds: effectedIds,
      source,
      destination
    }),
        newOrder = _reorderDocuments.newOrder,
        patches = _reorderDocuments.patches,
        message = _reorderDocuments.message; // Update local state


    if (newOrder !== null && newOrder !== void 0 && newOrder.length) {
      setOrderedData(newOrder);
    } // Transact new order patches


    if (patches !== null && patches !== void 0 && patches.length) {
      transactPatches(patches, message);
    }
  };

  var handleDragStart = start => {
    var id = start.draggableId;
    var selected = selectedIds.includes(id); // if dragging an item that is not selected - unselect all items

    if (!selected) clearSelected();
    setDraggingId(id);
  }; // Move one document up or down one place, by fake invoking the drag function


  var incrementIndex = (shiftFrom, shiftTo, id, entities) => {
    var result = {
      draggableId: id,
      source: {
        index: shiftFrom
      },
      destination: {
        index: shiftTo
      }
    };
    return handleDragEnd(result, entities);
  };

  var onWindowKeyDown = event => {
    if (event.key === 'Escape') {
      clearSelected();
    }
  };

  (0, _react.useEffect)(() => {
    window.addEventListener('keydown', onWindowKeyDown);
    return () => {
      window.removeEventListener('keydown', onWindowKeyDown);
    };
  }, []); // Find all items with duplicate order field

  var duplicateOrders = (0, _react.useMemo)(() => {
    if (!orderedData.length) return [];
    var orderField = orderedData.map(item => item[_constants.ORDER_FIELD_NAME]);
    return orderField.filter((item, index) => orderField.indexOf(item) !== index);
  }, [orderedData]);
  return /*#__PURE__*/_react.default.createElement(_reactBeautifulDnd.DragDropContext, {
    onDragStart: handleDragStart,
    onDragEnd: result => handleDragEnd(result, orderedData)
  }, /*#__PURE__*/_react.default.createElement(_reactBeautifulDnd.Droppable, {
    droppableId: "documentSortZone"
  }, (provided, snapshot) => /*#__PURE__*/_react.default.createElement("div", _extends({}, provided.droppableProps, {
    ref: provided.innerRef
  }), orderedData.map((item, index) => /*#__PURE__*/_react.default.createElement(_reactBeautifulDnd.Draggable, {
    key: "".concat(item._id, "-").concat(item[_constants.ORDER_FIELD_NAME]),
    draggableId: item._id,
    index: index // onClick={(event) => handleDraggableClick(event, provided, snapshot)}

  }, (innerProvided, innerSnapshot) => {
    var isSelected = selectedIds.includes(item._id);
    var isDragging = innerSnapshot.isDragging;
    var isGhosting = Boolean(!isDragging && draggingId && isSelected);
    var isUpdating = listIsUpdating && isSelected;
    var isDisabled = Boolean(!item[_constants.ORDER_FIELD_NAME]);
    var isDuplicate = duplicateOrders.includes(item[_constants.ORDER_FIELD_NAME]);
    var tone = cardTone({
      isDuplicate,
      isGhosting,
      isDragging,
      isSelected
    });
    return /*#__PURE__*/_react.default.createElement("div", _extends({
      ref: innerProvided.innerRef
    }, innerProvided.draggableProps, innerProvided.dragHandleProps, {
      style: isDisabled ? {
        opacity: 0.2,
        pointerEvents: "none"
      } : getItemStyle(innerProvided.draggableProps.style, isUpdating, isGhosting)
    }), /*#__PURE__*/_react.default.createElement(_ui.Box, {
      paddingBottom: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
      tone: tone,
      shadow: isDragging ? "2" : undefined,
      radius: 2
    }, /*#__PURE__*/_react.default.createElement(_Document.default, {
      doc: item,
      entities: orderedData,
      handleSelect: handleSelect,
      increment: incrementIndex,
      index: index,
      isFirst: index === 0,
      isLast: index === orderedData.length - 1
    }))));
  })), provided.placeholder)));
}

DraggableList.propTypes = {
  data: _propTypes.default.arrayOf(_propTypes.default.shape({
    _id: _propTypes.default.string
  }).isRequired).isRequired,
  type: _propTypes.default.string.isRequired,
  listIsUpdating: _propTypes.default.bool.isRequired,
  setListIsUpdating: _propTypes.default.func.isRequired
};
//# sourceMappingURL=DraggableList.js.map
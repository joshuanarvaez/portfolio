{"version":3,"file":"reorderDocuments.js","names":["lexicographicalSort","a","b","ORDER_FIELD_NAME","createManifest","entities","selectedItems","isMovingUp","curIndex","nextIndex","prevIndex","table","name","title","order","map","item","itemIndex","length","sort","reorderDocuments","selectedIds","source","destination","debug","startIndex","index","endIndex","filter","includes","_id","message","join","reduce","acc","cur","all","selected","prevRank","LexoRank","parse","min","curRank","nextRank","max","betweenRank","between","selectedIndex","value","patches","doc","set","allSorted","newOrder"],"sources":["../../src/helpers/reorderDocuments.js"],"sourcesContent":["import {LexoRank} from 'lexorank'\nimport {ORDER_FIELD_NAME} from './constants'\n\nfunction lexicographicalSort(a, b) {\n  if (a[ORDER_FIELD_NAME] < b[ORDER_FIELD_NAME]) {\n    return -1\n  }\n  if (a[ORDER_FIELD_NAME] > b[ORDER_FIELD_NAME]) {\n    return 1\n  }\n  return 0\n}\n\n// In lieu of actual *tests*, this is a table\n// to visualise the new order which if correct, shows:\n// 1. The `before` field (or start of the list)\n// 2. The inserted fields, in order\n// 3. The `after` document (or end of the list)\n// eslint-disable-next-line no-unused-vars\nfunction createManifest({entities, selectedItems, isMovingUp, curIndex, nextIndex, prevIndex}) {\n  const table = [\n    {\n      name: `Before`,\n      title:\n        curIndex === 0 ? `<<Start of List>>` : entities[isMovingUp ? prevIndex : curIndex]?.title,\n      order: curIndex === 0 ? `000` : entities[isMovingUp ? prevIndex : curIndex][ORDER_FIELD_NAME],\n    },\n    ...selectedItems.map((item, itemIndex) => ({\n      name: itemIndex,\n      title: item?.title,\n      order: item[ORDER_FIELD_NAME],\n    })),\n    {\n      name: `After`,\n      title:\n        curIndex === entities.length - 1\n          ? `<<End of List>>`\n          : entities[isMovingUp ? curIndex : nextIndex]?.title,\n      order:\n        curIndex === entities.length - 1\n          ? `zzz`\n          : entities[isMovingUp ? curIndex : nextIndex][ORDER_FIELD_NAME],\n    },\n  ]\n\n  return table.sort(lexicographicalSort)\n}\n\nexport const reorderDocuments = ({entities, selectedIds, source, destination, debug = false}) => {\n  const startIndex = source.index\n  const endIndex = destination.index\n  const isMovingUp = startIndex > endIndex\n  const selectedItems = entities.filter((item) => selectedIds.includes(item._id))\n  const message = [\n    `Moved`,\n    selectedItems.length === 1 ? `1 Document` : `${selectedItems.length} Documents`,\n    isMovingUp ? `up` : `down`,\n    `from position`,\n    `${startIndex + 1} to ${endIndex + 1}`,\n  ].join(' ')\n\n  const {all, selected} = entities.reduce(\n    (acc, cur, curIndex) => {\n      // Selected items get spread in below, so skip them here\n      if (selectedIds.includes(cur._id)) {\n        return {all: acc.all, selected: acc.selected}\n      }\n\n      // Drop seleced items in\n      if (curIndex === endIndex) {\n        const prevIndex = curIndex - 1\n        const prevRank = entities[prevIndex]?.[ORDER_FIELD_NAME]\n          ? LexoRank.parse(entities[prevIndex]?.[ORDER_FIELD_NAME])\n          : LexoRank.min()\n\n        const curRank = LexoRank.parse(entities[curIndex][ORDER_FIELD_NAME])\n\n        const nextIndex = curIndex + 1\n        const nextRank = entities[nextIndex]?.[ORDER_FIELD_NAME]\n          ? LexoRank.parse(entities[nextIndex]?.[ORDER_FIELD_NAME])\n          : LexoRank.max()\n\n        let betweenRank = isMovingUp ? prevRank.between(curRank) : curRank.between(nextRank)\n\n        // For each selected item, assign a new orderRank between now and next\n        for (let selectedIndex = 0; selectedIndex < selectedItems.length; selectedIndex += 1) {\n          selectedItems[selectedIndex][ORDER_FIELD_NAME] = betweenRank.value\n          betweenRank = isMovingUp ? betweenRank.between(curRank) : betweenRank.between(nextRank)\n        }\n\n        return {\n          // The `all` array gets sorted by order field later anyway\n          // so that this probably isn't necessary ¯\\_(ツ)_/¯\n          all: isMovingUp\n            ? [...acc.all, ...selectedItems, cur]\n            : [...acc.all, cur, ...selectedItems],\n          selected: selectedItems,\n        }\n      }\n\n      return {all: [...acc.all, cur], selected: acc.selected}\n    },\n    {all: [], selected: []}\n  )\n\n  const patches = selected.map((doc) => {\n    return [\n      doc._id,\n      {\n        set: {\n          [ORDER_FIELD_NAME]: doc[ORDER_FIELD_NAME],\n        },\n      },\n    ]\n  })\n\n  // Safety-check to make sure everything is in order\n  const allSorted = all.sort(lexicographicalSort)\n\n  return {newOrder: allSorted, patches, message}\n}\n"],"mappings":"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"}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.orderableDocumentListDeskItem = orderableDocumentListDeskItem;

var _structureBuilder = _interopRequireDefault(require("@sanity/desk-tool/structure-builder"));

var _icons = require("@sanity/icons");

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _OrderableDocumentList = _interopRequireDefault(require("../OrderableDocumentList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function orderableDocumentListDeskItem() {
  var _schema$get$title, _schema$get;

  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (!(config !== null && config !== void 0 && config.type)) {
    throw new Error("\n    \"type\" not defined in orderableDocumentListDeskItem parameters.\n    \n\n\n    Example: orderableDocumentListDeskItem({type: 'category'})\n    ");
  }

  var type = config.type,
      filter = config.filter,
      params = config.params,
      title = config.title,
      icon = config.icon,
      id = config.id;
  var listTitle = title !== null && title !== void 0 ? title : "Orderable ".concat(type);
  var listId = id !== null && id !== void 0 ? id : "orderable-".concat(type);
  var listIcon = icon !== null && icon !== void 0 ? icon : _icons.SortIcon;
  var typeTitle = (_schema$get$title = (_schema$get = _schema.default.get(type)) === null || _schema$get === void 0 ? void 0 : _schema$get.title) !== null && _schema$get$title !== void 0 ? _schema$get$title : type;
  return _structureBuilder.default.listItem(type).title(listTitle).id(listId).icon(listIcon).child(Object.assign(_structureBuilder.default.documentTypeList(type).serialize(), {
    // Prevents the component from re-rendering when switching documents
    __preserveInstance: true,
    // Prevents the component from NOT re-rendering when switching listItems
    key: listId,
    type: 'component',
    component: _OrderableDocumentList.default,
    options: {
      type,
      filter,
      params
    },
    menuItems: [_structureBuilder.default.menuItem().title("Create new ".concat(typeTitle)).intent({
      type: 'create',
      params: {
        type
      }
    }).serialize(), _structureBuilder.default.menuItem().title("Reset Order").icon(_icons.GenerateIcon).action("resetOrder").serialize(), _structureBuilder.default.menuItem().title("Show Increments").icon(_icons.SortIcon).action("showIncrements").serialize()]
  })).serialize();
}
//# sourceMappingURL=orderableDocumentListDeskItem.js.map